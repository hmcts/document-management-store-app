#!groovy

properties([
        [
                $class: 'GithubProjectProperty',
                displayName: 'Document Management Store App',
                projectUrlStr: 'https://github.com/hmcts/document-management-store-app'
        ],
        pipelineTriggers([
                [$class: 'GitHubPushTrigger']
        ])
])

@Library('Reform')
import uk.gov.hmcts.Artifactory
import uk.gov.hmcts.Ansible
import uk.gov.hmcts.RPMTagger
import uk.gov.hmcts.Packager
import uk.gov.hmcts.Versioner

String channel = '#dm-pipeline'

def product = "evidence"
def app = "document-management-store"
def branch = "${env.BRANCH_NAME}"
def version
def environment

def ansible = new Ansible(this, product)
def artifactory = new Artifactory(this)
def packager = new Packager(this, product)
def versioner = new Versioner(this)

def artifactorySourceRepo = "evidence-local"

def rpmTagger
def rpmVersion

try {
    node {

        stage('Checkout') {
            deleteDir()
            checkout scm
        }

        stage('Build') {
            versioner.addJavaVersionInfoWithMaven()
            sh 'mvn clean compile'
        }

        stage('Test') {
            try {
                sh 'mvn test'
            } finally {
                junit "target/surefire-reports/*.xml"
                try {
                    sh 'mvn jacoco:report'
                }finally {
                    jacoco(execPattern: 'target/jacoco.exec', buildOverBuild: true,
                            exclusionPattern: 'uk/gov/hmcts/dm/DmApp.java,'+
                                    'uk/gov/hmcts/dm/hateos/*,'+
                                    'uk/gov/hmcts/dm/exception/*,'+
                                    'uk/gov/hmcts/dm/domain/*,'+
                                    'uk/gov/hmcts/dm/commandobject/*,'+
                                    'uk/gov/hmcts/dm/hibernate/*,'+
                                    'uk/gov/hmcts/dm/config/**/*,'+
                                    'uk/gov/hmcts/dm/errorhandler/*,'+
                                    'uk/gov/hmcts/dm/repository/RepositoryFinder.java')
                    publishHTML([
                            allowMissing         : false,
                            alwaysLinkToLastBuild: false,
                            keepAll              : true,
                            reportDir            : "target/site/jacoco/",
                            reportFiles          : 'index.html',
                            reportName           : 'Jacoco Coverage Report'
                    ])
                }
            }
        }

        if ("master" == "${env.BRANCH_NAME}") {
            stage('Sonar') {
                sh "mvn sonar:sonar -Dsonar.host.url=$SONARQUBE_URL"
            }
        }

        stage('OWasp Dependency Check') {
            try {
                sh 'mvn dependency-check:check -Powasp'

            } catch (e) {
                slackSend(
                        channel: "#dm-pipeline",
                        color: 'danger',
                        message: "${env.JOB_NAME}:  <${env.BUILD_URL}console|Build ${env.BUILD_DISPLAY_NAME}> has vunerabilities. " +
                                "Check the OWasp report generated by this build for details."
                )
            }
            finally {
                publishHTML([
                        allowMissing         : false,
                        alwaysLinkToLastBuild: false,
                        keepAll              : true,
                        reportDir            : "target",
                        reportFiles          : 'dependency-check-report.html',
                        reportName           : 'OWasp Dependency Report'
                ])
            }
        }

        stage('Package (JAR)') {
            sh "mvn clean package -DskipTests"
        }

        if ("master" == "${env.BRANCH_NAME}") {


            stage('Package (RPM)') {
                rpmVersion = packager.javaRPM(app, '$(ls target/document-management-store-app-*.jar)', 'springboot', 'src/main/resources/application.yaml')
                version = "{ app: ${app}, rpmversion: ${rpmVersion}}"
            }

            stage('Publish RPM') {
                packager.publishJavaRPM(app)
                def rpmName = packager.rpmName(app, rpmVersion)
                rpmTagger = new RPMTagger(this, app, rpmName, artifactorySourceRepo)
            }

            stage('Publish Docker') {
                // Should follow naming convention "${app}.${env.BUILD_ID}.${env.GIT_COMMIT}"
                dockerImage imageName: "evidence/${app}", pushToLatestOnMaster: true
                dockerImage imageName: "evidence/${app}-database", context: 'docker/database', pushToLatestOnMaster: true
            }

            stage('Deploy and Test on Dev') {
                build job: 'document-deploy', parameters: [
                        [$class: 'StringParameterValue', name: 'BUILD_APP', value: app],
                        [$class: 'StringParameterValue', name: 'BUILD_VERSION', value: rpmVersion],
                        [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: 'dev']
                ]
            }

//            stage('Deploy and Test on Test') {
//                build job: 'document-deploy', parameters: [
//                        [$class: 'StringParameterValue', name: 'BUILD_APP', value: app],
//                        [$class: 'StringParameterValue', name: 'BUILD_VERSION', value: rpmVersion],
//                        [$class: 'StringParameterValue', name: 'ENVIRONMENT', value: 'test']
//                ]
//                rpmTagger.tagTestingPassedOn("test")
//            }

            notifyBuildFixed channel: channel
        } else {

            try {
                stage('Start App with Docker') {
                    sh "docker-compose -f docker-compose.yml -f docker-compose-test.yml pull"
                    sh "docker-compose up --build -d"
                }

                stage('Run Integration tests') {
                    sh "docker-compose -f docker-compose.yml -f docker-compose-test.yml run -e GRADLE_OPTS document-management-store-integration-tests"
                }
            } finally {
                sh "docker-compose down"
            }

        }
    }
} catch (e){
    notifyBuildFailure channel: channel
    throw e
}



