#!groovy

properties([
    [
        $class: 'GithubProjectProperty',
        displayName: 'Document Management Store API',
        projectUrlStr: 'https://github.com/hmcts/document-management-store-app'
    ],
    pipelineTriggers([cron('H 21 * * *')]), // scheduling to trigger jenkins job.
    parameters([
        string(name: 'URL_TO_TEST', defaultValue: 'http://dm-store-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
        string(name: 'SecurityRules',
            defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
            description: 'The URL you want to run these tests against'),
    ]),
])

@Library("Infrastructure")

def type = "java"
def product = "dm"
def component = "store"

def secrets = [
    's2s-${env}': [
        secret('microservicekey-em-gw', 'S2S_TOKEN')
    ],
    'dm-${env}': [
        secret('dm-store-storage-account-primary-connection-string', 'STORAGEACCOUNT_PRIMARY_CONNECTION_STRING')
    ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
    [ $class: 'AzureKeyVaultSecret',
      secretType: 'Secret',
      name: secretName,
      version: '',
      envVariable: envVar
    ]
}


def vaultOverrides = [
    'preview' : 'aat',
    'spreview': 'saat'
]

withNightlyPipeline(type, product, component) {

    // Vars for Kubernetes
    env.IDAM_API_URL = "https://idam-api.aat.platform.hmcts.net"
    env.S2S_URL  = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.TEST_URL = "http://dm-store-aat.service.core-compute-aat.internal"
    env.MP4_52MB = "e58a9fa5-4f6f-438f-b44a-8c0877e945d0/binary"
    env.MP4_111MB = "50f9dd86-1615-461d-bca8-e437103dd734/binary"

    loadVaultSecrets(secrets)
    overrideVaultEnvironments(vaultOverrides)

    after('DependencyCheckNightly') {
        stage('NightlyFunctional') {
            println("~~~~~~~~~~~~~~~~~  Starting Nightly Only Functional :aat ~~~~~~~~~~")
            sh("./gradlew --no-daemon --init-script init.gradle nightlyFunctional")
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
            steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'

        }
    }
    after('fullFunctionalTest') {
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/site/serenity/**/*'
        steps.archiveArtifacts allowEmptyArchive: true, artifacts: 'build/reports/**/*'
    }

    enableFullFunctionalTest()
    enableMutationTest()
    enableSecurityScan()

    enableSlackNotifications('#em-dev-chat')

}
