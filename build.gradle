import org.flywaydb.gradle.task.FlywayMigrateTask

plugins {
    id 'application'
    id 'uk.gov.hmcts.java' version '0.12.67'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.boot' version '3.5.4'
    id 'com.github.ben-manes.versions' version '0.52.0'
    id 'org.sonarqube' version '6.2.0.5505'
    id 'jacoco'
    id 'checkstyle'
    id 'io.freefair.lombok' version '8.14'
    id 'info.solidsoft.pitest' version '1.15.0'
    id 'org.owasp.dependencycheck' version '12.1.3'
    id 'au.com.dius.pact' version '4.6.17'
    id 'org.flywaydb.flyway' version '11.10.5'
    id 'net.serenity-bdd.serenity-gradle-plugin' version '4.2.34'
}

group = 'uk.gov.hmcts.dm'
version = '2.0.0'

application {
    mainClass = 'uk.gov.hmcts.dm.DmApp'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

configurations {
    functionalTestImplementation.extendsFrom(testImplementation)
    functionalTestRuntimeOnly.extendsFrom(testRuntimeOnly)
    smokeTestImplementation.extendsFrom(testImplementation)
    smokeTestRuntimeOnly.extendsFrom(testRuntimeOnly)
    contractTestImplementation.extendsFrom(testImplementation)
    contractTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

configurations.configureEach {
    exclude group: 'org.bouncycastle', module: 'bcprov-jdk15on'
    exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
    exclude group: 'org.springframework.security', module: 'spring-security-rsa'
    exclude group: 'org.codehaus.jettison', module: 'jettison'
}

tasks.withType(JavaCompile).configureEach {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
    options.encoding = 'UTF-8'
}

def versions = [
    ehcache            : '3.10.8',
    postgresql         : '42.7.7',
    jackson            : '2.19.2',
    serenity           : '4.2.34',
    logging            : '6.1.9',
    pact_version       : '4.6.17',
    emTestHelper       : '2.1.1',
    shedlock           : '6.9.2',
    hibernate          : '6.6.24.Final',
    jupiter            : '5.13.4',
    springSecurity     : '6.5.2'
]

ext['hibernate.version'] = versions.hibernate

dependencies {

    implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.31.1'
    implementation group: 'org.apache.tika', name: 'tika-core', version: '3.2.1'
    implementation group: 'org.apache.tika', name: 'tika-parsers-standard-package', version: '3.2.1'

    implementation group: 'com.google.guava', name: 'guava', version: '33.4.8-jre'

    implementation group: 'commons-io', name: 'commons-io', version: '2.20.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jackson

    implementation group: 'org.ehcache', name: 'ehcache', version: versions.ehcache, {
        exclude group: "org.glassfish.jaxb", module: "jaxb-runtime"
    }

    implementation group: 'org.springframework', name: 'spring-context-support', version: '6.2.9'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', {
        exclude group: "org.hibernate", module: "hibernate-core"
    }
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-batch'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.18.0'

    implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: versions.hibernate
    implementation group:'org.hibernate.orm', name: 'hibernate-envers', version: versions.hibernate

    implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql

    implementation group: "net.javacrumbs.shedlock", name: "shedlock-spring", version: versions.shedlock
    implementation group: "net.javacrumbs.shedlock", name: "shedlock-provider-jdbc-template", version: versions.shedlock

    implementation group: 'org.flywaydb', name: 'flyway-core', version: '11.10.5'
    runtimeOnly group: 'org.flywaydb', name: 'flyway-database-postgresql', version: '11.10.5'

    implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: '5.3.3'
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.1'


    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.logging
    implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.logging


    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '4.3.0'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'

    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-resource-server', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-web', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-jose', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-oauth2-core', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-config', version: versions.springSecurity
    implementation group: 'org.springframework.security', name: 'spring-security-core', version: versions.springSecurity

    implementation group: 'org.apache.groovy', name: 'groovy', version: '4.0.28'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
        exclude(module: 'commons-logging')
    }

    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '6.5.2'
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.jupiter
    testRuntimeOnly group: 'org.junit.jupiter', name:  'junit-jupiter-engine', version: versions.jupiter
    testImplementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.2'
    testImplementation group:  'org.glassfish.jaxb', name: 'jaxb-runtime', version: '4.0.5'
    testImplementation group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'
    testImplementation group: 'com.github.stephenc.jcip', name :'jcip-annotations', version:'1.0-1'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-junit5', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenity

    functionalTestImplementation group: 'uk.gov.hmcts.reform', name: 'em-test-helper', version:'2.2.0'

    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.5.18'
    testImplementation group: 'ch.qos.logback', name: 'logback-core', version: '1.5.18'


    testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.10', classifier: 'all', {
        exclude group: 'commons-io', module: 'commons-io'
        exclude group: 'org.apache.commons', module: 'commons-lang3'
        exclude group: 'ch.qos.logback', module: 'logback-classic'
        exclude group: 'ch.qos.logback', module: 'logback-core'
    }

    testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.21.3'

    //pact
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version
    contractTestImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.jupiter
    contractTestRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version : versions.jupiter

    contractTestImplementation group: 'au.com.dius.pact', name: 'provider', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring6', version: versions.pact_version

    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version

    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath


    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.9'
}

dependencyManagement {
    dependencies {
        dependencySet(group: 'org.junit.platform', version: '1.13.4') {
            entry 'junit-platform-commons'
            entry 'junit-platform-engine'
        }
    }
}
dependencyCheck {
    suppressionFile = 'config/owasp/dependency-check-suppressions.xml'
}

checkstyle {
    maxWarnings = 0
    toolVersion = '11.0.0'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

def coverageExclusionList = [
    '**uk/gov/hmcts/dm/DmApp.java',
    '**uk/gov/hmcts/dm/hateos/*',
    '**uk/gov/hmcts/dm/exception/*',
    '**uk/gov/hmcts/dm/domain/*',
    '**uk/gov/hmcts/dm/commandobject/*',
    '**uk/gov/hmcts/dm/config/**/*',
    '**uk/gov/hmcts/dm/errorhandler/*',
    '**uk/gov/hmcts/dm/repository/RepositoryFinder.java',
    '**uk/gov/hmcts/dm/actuate/health/IdamHealth.java',
    '**uk/gov/hmcts/dm/actuate/health/IdamServiceHealth.java',
    '**uk/gov/hmcts/dm/controller/WelcomeController.java',
    '**uk/gov/hmcts/dm/service/Constants.java',
    '**uk/gov/hmcts/dm/service/FileContentVerifier*',
    '**uk/gov/hmcts/dm/service/DocumentContentVersionModel.java',
    '**uk/gov/hmcts/dm/data/migration/PendingMigrationScriptException*',
    '**uk/gov/hmcts/dm/data/migration/FlywayNoOpStrategy*',
    '**uk/gov/hmcts/dm/config/security/DmServiceAuthFilter*'
]

//(jacocoTestReport | jacocoTestCoverageVerification)
jacoco {
    toolVersion = "0.8.13"
    reportsDirectory = file("${project.getLayout().getBuildDirectory()}/reports/jacoco")
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.required = true
        csv.required = false

        xml.outputLocation = file("${project.getLayout().getBuildDirectory()}/reports/jacoco/test/jacocoTestReport.xml")
    }

}

pitest {
    targetClasses = ['uk.gov.hmcts.dm.*']
    excludedClasses = [
        'uk.gov.hmcts.dm.authchecker.*' ,
        'uk.gov.hmcts.dm.domain.*',
        'uk.gov.hmcts.dm.DmApp.java',
        'uk.gov.hmcts.dm.service.util.*'
    ]

    enableDefaultIncrementalAnalysis = true
    historyInputLocation = 'build/reports/pitest/fastermutationtesting'
    historyOutputLocation ='build/reports/pitest/fastermutationtestingoutput'
    threads = 15
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    fileExtensionsToFilter.addAll('xml','json')
    outputFormats = ['XML', 'HTML','CSV']
    mutationThreshold = 5
    coverageThreshold = 0
    jvmArgs = ['-Xms1G','-Xmx3G']
    timestampedReports = false
    failWhenNoMutations = false
    detectInlinedCode = true
    junit5PluginVersion = '1.2.1'
    pitestVersion = '1.17.3'
}

project.tasks['sonarqube'].dependsOn test, jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.outputLocation}"
        property "sonar.exclusions", coverageExclusionList.join(", ")
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }

}

bootJar {
    getArchiveFileName().set(provider {
        'dm-store.jar'
    })

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

//This is used in get the version for fakeversion and buildInfo  (./gradlew -q printVersion)
tasks.register('printVersion') {
    description = 'Prints the version of this project'
    doLast {
        print project.version
    }
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

test {
    useJUnitPlatform()
}

tasks.register('functional', Test) {
//    doFirst(){
//        printf("Available processors:::::::::: " + Runtime.runtime.availableProcessors().intdiv(2).toString())
//    }
//
//    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
//    forkEvery = 10

    group = 'Delivery pipeline'
    description = 'Executes functional tests'

    setTestClassesDirs(sourceSets.functionalTest.output.classesDirs)
    setClasspath(sourceSets.functionalTest.runtimeClasspath)

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
    useJUnitPlatform()
    //finalizedBy aggregate
}

serenity {
    reports = ["single-page-html"]
}

processContractTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}
processFunctionalTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.register('smoke', Test) {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests'
    setTestClassesDirs(sourceSets.smokeTest.output.classesDirs)
    setClasspath(sourceSets.smokeTest.runtimeClasspath)
    include "uk/gov/hmcts/dm/smoke/**"
    useJUnitPlatform()
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

tasks.register('fortifyScan', JavaExec) {
    mainClass.set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

project.ext {
    pacticipantVersion = getCheckedOutGitCommitHash()
}

static def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}


tasks.register('contract', Test) {
    group = 'Delivery pipeline'
    description = 'Runs the consumer Pact tests'
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    include '**/consumer/**'
    systemProperty 'pact.rootDir', "pacts"
    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}


pact {
    broker {
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
    }
    publish {
        pactBrokerUrl = System.getenv("PACT_BROKER_FULL_URL") ?: 'http://localhost:80'
        pactDirectory = 'pacts'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
        consumerBranch = System.getenv("PACT_BRANCH_NAME") ?: 'Dev'
        version = project.pacticipantVersion
    }
}

pactPublish {
    pactPublish = project.pact.publish
}

tasks.register('runAndPublishConsumerPactTests', Test) {
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang=ALL-UNNAMED']
    include '**/consumer/**'
}

runAndPublishConsumerPactTests.dependsOn contract
runAndPublishConsumerPactTests.finalizedBy pactPublish

tasks.register('providerContractTests', Test) {
    description = 'Runs ONLY the provider Pact verification tests.'
    group = 'Verification'

    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath

    include '**/provider/**'

    testLogging {
        exceptionFormat = 'full'
        showStandardStreams = true
    }

    if (project.hasProperty('pact.verifier.publishResults')) {
        systemProperty 'pact.verifier.publishResults', project.property('pact.verifier.publishResults')
    }
    if (project.hasProperty('pact.provider.version')) {
        systemProperty 'pact.provider.version', project.property('pact.provider.version')
    } else {
        systemProperty 'pact.provider.version', project.pacticipantVersion
    }

    if (project.hasProperty('pact.provider.branch')) {
        systemProperty 'pact.provider.branch', project.property('pact.provider.branch')
    } else {
        systemProperty 'pact.provider.branch', System.getenv("PACT_BRANCH_NAME") ?: "Dev"
    }

    doFirst {
        println "--- Running 'providerContractTests' (including only **/provider/**) ---"
        println "System properties for this run: ${systemProperties}"
    }
}

tasks.register('runProviderPactVerification') {
    description = 'Entry point for Jenkins to run provider contract tests.'
    group = 'Verification'

    dependsOn tasks.named('providerContractTests')
}

flyway {
    url = System.getenv('FLYWAY_URL')
    user = System.getenv('FLYWAY_USER')
    password = System.getenv('FLYWAY_PASSWORD')
    baselineOnMigrate = true
    baselineVersion = '1'
}

tasks.register('migratePostgresDatabase', FlywayMigrateTask) {
    classpath = sourceSets.main.runtimeClasspath
    baselineOnMigrate = true
    if (project.hasProperty("dburl")) {
        url = "jdbc:postgresql://${dburl}"
    }
}
