buildscript {
    dependencies {
        classpath("net.serenity-bdd:serenity-gradle-plugin:2.3.13")
        classpath("net.serenity-bdd:serenity-single-page-report:2.3.13")
    }
}

plugins {
    id 'application'
    id 'groovy'
    id 'uk.gov.hmcts.java' version '0.12.12'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '2.4.5'
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'org.sonarqube' version '3.3'
    id 'jacoco'
    id 'checkstyle'
    id 'io.franzbecker.gradle-lombok' version '5.0.0'
    id "info.solidsoft.pitest" version '1.5.2'
    id 'au.com.dius.pact' version '4.1.8'

}

apply plugin: 'java'
apply plugin: 'idea'
apply from: 'liquibase.gradle'
apply plugin: 'net.serenity-bdd.aggregator'

group = 'uk.gov.hmcts.dm'
version = '2.0.0'
mainClassName = 'uk.gov.hmcts.dm.DmApp'
sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/functionalTest/groovy')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir('src/smokeTest/groovy')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
    contractTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

configurations {
    functionalTestImplementation.extendsFrom(testImplementation)
    functionalTestRuntime.extendsFrom(testRuntime)
    smokeTestCompile.extendsFrom(testImplementation)
    smokeTestRuntime.extendsFrom(testRuntime)
    contractTestImplementation.extendsFrom(testImplementation)
    contractTestRuntimeOnly.extendsFrom(testRuntime)
    functionalTestImplementation.extendsFrom(testImplementation)
    functionalTestRuntime.extendsFrom(testRuntime)

}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://jitpack.io" }
}

def versions = [
    ehcache            : '3.9.3',
    jacocoMavenPlugin  : '0.8.2',
    lombok             : '1.18.20',
    liquibase          : '3.8.1',
    postgresql         : '42.2.20',
    jackson            : '2.12.3',
    powermock          : '1.7.4',
    serenity           : '2.3.13',
    serenityreporter   : '2.3.13',
    serenityRestAssured: '2.3.4',
    springBoot         :  springBoot.class.package.implementationVersion,
    logging            : '5.1.7',
    pitest             : '1.5.2',
    gradlePitest       : '1.3.0',
    sonarPitest        : '0.5',
    pact_version       : '4.1.7',
    emTestHelper       : '1.20.3',
    shedlock           : '4.28.0',
    springfoxSwagger   : '3.0.0',
    swagger            : '1.6.3'
]

dependencyManagement {
    dependencies {
        // Do not change - START
        // Changing below will break Serenity Report generation
        dependencySet(group: 'junit', version: '4.13') {
            entry 'junit'
        }

        dependencySet(group: 'org.junit.jupiter', version: '5.7.1') {
            entry 'junit-jupiter'
            entry 'junit-jupiter-api'
            entry 'junit-jupiter-params'
        }

        dependencySet(group: 'org.junit.vintage', version: '5.6.2') {
            entry 'junit-vintage-engine'
        }

        dependencySet(group: 'net.bytebuddy', version: '1.10.14') {
            entry 'byte-buddy'
            entry 'byte-buddy-agent'
        }

        // Do not change - END

        //CVE-2021-22118
        dependencySet(group: 'org.springframework', version: '5.3.7') {
            entry 'spring-aop'
            entry 'spring-aspects'
            entry 'spring-beans'
            entry 'spring-context'
            entry 'spring-core'
            entry 'spring-expression'
            entry 'spring-jcl'
            entry 'spring-jdbc'
            entry 'spring-orm'
            entry 'spring-tx'
            entry 'spring-web'
            entry 'spring-webmvc'
        }

        // Fix for migratePostgresDatabase task failure
        dependencySet(group: 'org.liquibase', version: '3.8.2') {
            entry 'liquibase-core'
        }

        //CVE-2021-27568
        dependencySet(group: 'net.minidev', version: '2.4.7') {
            entry 'json-smart'
        }

        //CVE-2021-33037
        dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.48') {
            entry 'tomcat-embed-core'
            entry 'tomcat-embed-websocket'
        }

        //CVE-2021-22119
        dependencySet(group: 'org.springframework.security', version: '5.4.7') {
            entry 'spring-security-core'
        }

        //CVE-2021-28170
        dependencySet(group: 'org.glassfish', version: '4.0.2') {
            entry 'jakarta.el'
        }
    }
}

dependencies {
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.48'
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.48'

    implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.14.0'
    implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.24'
    implementation group: 'org.apache.tika', name: 'tika-core', version: '2.1.0'

    implementation group: 'com.google.guava', name: 'guava', version: '31.0.1-jre'

    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
    implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jackson

    implementation group: 'org.ehcache', name: 'ehcache', version: versions.ehcache

    implementation group: 'org.springframework', name: 'spring-context-support', version: '5.3.8'
    implementation group: 'org.springframework.boot', name: 'spring-boot-devtools', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot
    implementation (group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: versions.springBoot) {
        exclude group: "org.hibernate", module: "hibernate-core"
    }
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-rest', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-batch', version: versions.springBoot
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'

    implementation group: 'org.hibernate', name: 'hibernate-core', version: '5.5.7.Final'

    implementation group: 'com.github.hmcts.liquibase', name: 'liquibase-core', version: '3.8.2'

    implementation group: 'io.swagger', name: 'swagger-core', version: versions.swagger
    implementation group: 'io.swagger', name: 'swagger-annotations', version: versions.swagger

    implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql

    implementation group: "net.javacrumbs.shedlock", name: "shedlock-spring", version: versions.shedlock
    implementation group: "net.javacrumbs.shedlock", name: "shedlock-provider-jdbc-template", version: versions.shedlock

    compileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    implementation (group: 'com.github.hmcts', name: 'auth-checker-lib', version: '2.1.5') {
        exclude group: 'com.github.hmcts', module: 'java-logging-spring'
    }
    implementation group: 'com.github.hmcts', name: 'java-logging', version: versions.logging

    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '3.0.2'

    testImplementation(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot) {
        exclude(module: 'commons-logging')
    }

    testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '5.5.0'

    testImplementation group: 'com.h2database', name: 'h2', version: '1.4.200'
    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.9'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.9'
    testImplementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '3.0.1'
    testImplementation group: 'com.warrenstrange', name: 'googleauth', version: '1.5.0'
    testImplementation group: 'org.codehaus.groovy', name :'groovy-all', version:'2.4.17'
    testImplementation group: 'com.github.stephenc.jcip', name :'jcip-annotations', version:'1.0-1'

    testImplementation (group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serenityRestAssured) {
        exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    }
    testImplementation (group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serenity) {
        exclude group: 'com.sun.xml.bind', module: 'jaxb-osgi'
    }
    testImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serenity
    testImplementation group: 'net.serenity-bdd', name: 'serenity-single-page-report', version: versions.serenityreporter
    testRuntimeOnly 'org.junit.vintage:junit-vintage-engine:5.6.2'
    functionalTestImplementation group: 'com.github.hmcts', name: 'em-test-helper', version: versions.emTestHelper

    testImplementation 'com.github.hmcts:fortify-client:1.2.0:all'

    //pact
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'spring', version: versions.pact_version
    contractTestImplementation group: 'au.com.dius.pact.provider', name: 'junit5spring', version: versions.pact_version
    contractTestImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    contractTestImplementation("org.junit.jupiter:junit-jupiter-api:5.7.1")
    contractTestRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.7.1")
    contractTestImplementation('org.junit.jupiter:junit-jupiter-api:5.7.1')
    contractTestImplementation sourceSets.main.runtimeClasspath
    contractTestImplementation sourceSets.test.runtimeClasspath

    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: versions.springfoxSwagger
}

dependencyCheck {
    suppressionFile = 'config/owasp/dependency-check-suppressions.xml'
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.34'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

def coverageExclusionList = [
    '**uk/gov/hmcts/dm/domain/',
    '**uk/gov/hmcts/dm/DmApp.java',
    '**uk/gov/hmcts/dm/hateos/*',
    '**uk/gov/hmcts/dm/exception/*',
    '**uk/gov/hmcts/dm/domain/*',
    '**uk/gov/hmcts/dm/commandobject/*',
    '**uk/gov/hmcts/dm/hibernate/*',
    '**uk/gov/hmcts/dm/config/**/*',
    '**uk/gov/hmcts/dm/errorhandler/*',
    '**uk/gov/hmcts/dm/repository/RepositoryFinder.java',
    '**uk/gov/hmcts/dm/service/batch/CustomItemWriter.java',
    '**uk/gov/hmcts/dm/appinsights/*',
    '**uk/gov/hmcts/dm/actuate/health/IdamHealth.java',
    '**uk/gov/hmcts/dm/actuate/health/IdamServiceHealth.java',
    '**uk/gov/hmcts/dm/service/FileSizeVerifier.java',
    '**uk/gov/hmcts/dm/controller/WelcomeController.java'
]

//(jacocoTestReport | jacocoTestCoverageVerification)
jacoco {
    toolVersion = '0.8.2' // jacocoMavenPluginVersion
    reportsDirectory = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = false

        xml.destination file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }

}

pitest {
    targetClasses = ['uk.gov.hmcts.dm.*']
    excludedClasses = [
        'uk.gov.hmcts.dm.appinsights.*' ,
        'uk.gov.hmcts.dm.authchecker.*' ,
        'uk.gov.hmcts.dm.domain.*',
        'uk.gov.hmcts.dm.DmApp.java',
        'uk.gov.hmcts.dm.service.util.*'
    ]

    enableDefaultIncrementalAnalysis = true
    historyInputLocation = 'build/reports/pitest/fastermutationtesting'
    historyOutputLocation ='build/reports/pitest/fastermutationtestingoutput'
    threads = 15
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    fileExtensionsToFilter.addAll('xml','json')
    outputFormats = ['XML', 'HTML','CSV']
    mutationThreshold = 5
    coverageThreshold = 0
    maxMutationsPerClass = 15
    jvmArgs = ['-Xms1G','-Xmx3G']
    timestampedReports = false
    failWhenNoMutations = false
    detectInlinedCode = true

}

project.tasks['sonarqube'].group = "Verification"

project.tasks['sonarqube'].dependsOn test, jacocoTestReport

sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.coverage.jacoco.xmlReportPaths", "${jacocoTestReport.reports.xml.destination.path}"
        property "sonar.exclusions", coverageExclusionList.join(", ")
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

bootJar {
    getArchiveFileName().set(provider {
        'dm-store.jar'
    })

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

//This is used in get the version for fakeversion and buildInfo  (./gradlew -q printVersion)
task printVersion {
    description 'Prints the version of this project'
    doLast {
        print project.version
    }
}

test {
    useJUnitPlatform()
}

task functional(type: Test, description: 'Runs the functional tests.', group: 'Verification') {
    doFirst(){
        printf("Available processors:::::::::: " + Runtime.runtime.availableProcessors().intdiv(2).toString())
    }

    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    forkEvery = 10

    group = 'Delivery pipeline'
    description = 'Executes functional tests'

    setTestClassesDirs(sourceSets.functionalTest.output.classesDirs)
    setClasspath(sourceSets.functionalTest.runtimeClasspath)

    failFast = true

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")

    finalizedBy aggregate
}

serenity {
    reports = ["single-page-html"]
}

task smoke(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests'
    setTestClassesDirs(sourceSets.smokeTest.output.classesDirs)
    setClasspath(sourceSets.smokeTest.runtimeClasspath)
    include "uk/gov/hmcts/dm/smoke/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task fortifyScan(type: JavaExec)  {
    main = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

project.ext {
    pactVersion = getCheckedOutGitCommitHash()
}
def getCheckedOutGitCommitHash() {
    'git rev-parse --verify --short HEAD'.execute().text.trim()
}

task runProviderPactVerification(type: Test) {
    logger.lifecycle("Runnning contract Tests")
    useJUnitPlatform()
    testClassesDirs = sourceSets.contractTest.output.classesDirs
    classpath = sourceSets.contractTest.runtimeClasspath
    systemProperty 'pact.verifier.publishResults', System.getProperty('pact.verifier.publishResults')
}

runProviderPactVerification.finalizedBy pactVerify
